# Docker compose file
# - ubuntu version defined with args, no more in the names of files or folders
#   just ubuntu_server, ubuntu_client ect.
# - backups can be found in docker-compose-2204.yaml
#
# docker-compose up -d --force-recreate --no-deps --build ubuntu_server
# deprecated: docker-compose up -d --force-recreate --no-deps --build ubuntu_server
# Note! some of the service def files moved to deprecated subfolder

# IMPORTANT: CHANGE MOUNT_BIND_FOLDER_NAME AS NEEDED IN ENV FILES

# Start containers
#
# start ubuntu-server
# $ docker compose up --force-recreate --build -d ubuntu_server
#
# start ubuntu-client
# $ docker compose up --force-recreate --build -d ubuntu_client
#
# start mosquitto
# $ docker compose up --force-recreate --build -d mosquitto
#
# start mysql
# $ docker compose up --force-recreate --build -d mqtt-ambient-database
#
# start telegraf
# $ docker compose up --force-recreate --build -d telegraf

services:
  # main server service defs
  ubuntu_server:
    # builds context is Dockerfile folder
    # => set it to parent folder to copy the go.* module files
    build:
      context: ./
      dockerfile: ./docker-defs/ubuntu_server/Dockerfile
      args:
        UBUNTU_VERSION: ${UBUNTU_VERSION}

    # use these if you want to run the container without a real program
    stdin_open: true
    tty: true

    environment:
      RUN_IN_CONTAINER: "YES"
      SERVER_PORT_2_LISTEN: ${SERVER_PORT}

    networks:
      - c-lang-network

    volumes:
      - ${MOUNT_BIND_FOLDER_NAME_SERVER}:/usr/src/c-projects

    # testing the connections from HostOS
    ports:
      - ${SERVER_TESTING_PORT}:${SERVER_PORT}

  # main client service defs
  ubuntu_client:
    # builds context is Dockerfile folder
    # => set it to parent folder to copy the go.* module files
    build:
      context: ./
      dockerfile: ./docker-defs/ubuntu_client/Dockerfile
      args:
        UBUNTU_VERSION: ${UBUNTU_VERSION}

    # use these if you want to run the container without a real program
    stdin_open: true
    tty: true

    environment:
      RUN_IN_CONTAINER: "YES"
      SERVER_PORT_2_LISTEN: ${SERVER_PORT}

    networks:
      - c-lang-network

    volumes:
      - ${MOUNT_BIND_FOLDER_NAME_CLIENT}:/usr/src/c-projects

    ports:
      - ${CLIENT_TESTING_PORT}:${SERVER_PORT}

networks:
  c-lang-network:
# NOTE on network communication:
# One can use following to inspect the ips inside the container:
# $ docker network inspect dockerdevelopment_c-lang-network
#
# (Command issued in the host os)
#
# This command shows the ips of the connected containers.
# To run an app which needs communication between containers,
# one can use the ips shown.
#
# Server listening with following will work:
# - servaddr.sin_addr.s_addr =  inet_addr("0.0.0.0"); OR
# - servaddr.sin_addr.s_addr = INADDR_ANY;
#
# Note! inet_addr("127.0.0.1") will not work on docker networks!
#
# Container names, ips ect: https://9to5answer.com/docker-compose-container-ip-address-with-container-name

